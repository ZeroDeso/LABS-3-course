\\первый способ ; В данном примере я буду использовать структуры данных 
\\Set для отслеживания уникальных строк. Для сохранения информации о количестве удаленных
\\\\дублирующихся строк мы можем добавить специальную метку в сжатый файл. 
\\Восстановление из сжатого файла будет осуществляться путем повторения дублирующихся строк в соответствии с сохраненным количеством.
import java.io.*;
import java.util.HashSet;
import java.util.Set;

public class TextFileCompression {

    public static void compress(String inputFile, String compressedFile) {
        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(compressedFile))) {

            Set<String> uniqueLines = new HashSet<>();
            int removedDuplicates = 0;
            String line;

            // Чтение строк из файла
            while ((line = reader.readLine()) != null) {
                // Если строка уникальна, добавляем ее в множество
                if (uniqueLines.add(line)) {
                    writer.write(line);
                    writer.newLine();
                } else {
                    removedDuplicates++;
                }
            }

            // Добавляем метку с количеством удаленных дубликатов в конец сжатого файла
            writer.write("Removed Duplicates: " + removedDuplicates);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void decompress(String compressedFile, String outputFile) {
        try (BufferedReader reader = new BufferedReader(new FileReader(compressedFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

            String line;
            int removedDuplicates = 0;

            // Чтение строк из файла
            while ((line = reader.readLine()) != null) {
                // Проверяем, содержится ли в строке метка об удаленных дубликатах
                if (line.startsWith("Removed Duplicates: ")) {
                    removedDuplicates = Integer.parseInt(line.substring("Removed Duplicates: ".length()));
                } else {
                    // Повторяем строку восстановленное количество раз
                    for (int i = 0; i < removedDuplicates + 1; i++) {
                        writer.write(line);
                        writer.newLine();
                    }
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        String inputFileName = "input.txt";
        String compressedFileName = "compressed.txt";
        String decompressedFileName = "decompressed.txt";

        // Создаем текстовый файл с данными для теста
        try (PrintWriter writer = new PrintWriter(new FileWriter(inputFileName))) {
            writer.println("Line 1");
            writer.println("Line 2");
            writer.println("Line 1");
            writer.println("Line 3");
            writer.println("Line 2");
            writer.println("Line 4");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Сжатие файла
        compress(inputFileName, compressedFileName);

        // Восстановление из сжатого файла
        decompress(compressedFileName, decompressedFileName);
    }
}
\\
\\второй способ, с использованием Apache Commons Compress

import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.utils.IOUtils;

import java.io.*;
import java.util.zip.ZipInputStream;

public class AdvancedCompression {

    public static void compress(String inputFileName, String compressedFileName) {
        try (ZipArchiveOutputStream zipOutput = new ZipArchiveOutputStream(new FileOutputStream(compressedFileName));
             BufferedReader reader = new BufferedReader(new FileReader(inputFileName))) {

            // Создаем ZIP-архив
            ArchiveEntry entry = new ZipArchiveEntry("compressed.txt");
            zipOutput.putArchiveEntry(entry);

            // Копируем содержимое файла в архив
            IOUtils.copy(reader, zipOutput);

            // Завершаем запись в архив
            zipOutput.closeArchiveEntry();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void decompress(String compressedFileName, String outputFile) {
        try (ZipInputStream zipInput = new ZipInputStream(new FileInputStream(compressedFileName));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

            // Чтение ZIP-архива
            ZipArchiveEntry entry = zipInput.getNextZipEntry();
            if (entry != null) {
                // Копируем содержимое архива в файл
                IOUtils.copy(zipInput, writer);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        String inputFileName = "input.txt";
        String compressedFileName = "compressed.zip";
        String decompressedFileName = "decompressed.txt";

        // Создаем текстовый файл с данными для теста
        try (PrintWriter writer = new PrintWriter(new FileWriter(inputFileName))) {
            writer.println("Line 1");
            writer.println("Line 2");
            writer.println("Line 1");
            writer.println("Line 3");
            writer.println("Line 2");
            writer.println("Line 4");
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Сжатие файла в ZIP-формат
        compress(inputFileName, compressedFileName);

        // Восстановление из ZIP-формата
        decompress(compressedFileName, decompressedFileName);
    }
}




